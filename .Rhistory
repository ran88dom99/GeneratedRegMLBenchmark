source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
which.computer<-Sys.info()[['nodename']]
gen.count=gen.count+1
gens.names[gen.count]="ifs nested 2 layer"
max.out[gen.count]=1
varim=c(1,1,1,1,1)
varimport[gen.count,1:length(varim)]=varim
for(Row in 1:Rows){
simScores[Row,1:10]=rnorm(10, mean = 0, sd = 1)
}
for(Row in 1:Rows){
if(simScores[Row,3]>.3){
if(simScores[Row,2]>.3){
simScores[Row,1]=-simScores[Row,6]
}else{
simScores[Row,1]=simScores[Row,6]
}
}else{
if(simScores[Row,4]>.3){
simScores[Row,1]=-simScores[Row,5]
}else{
simScores[Row,1]=simScores[Row,5]
}
}
}
write.table(round(simScores,digits  = 3),
file = paste("Generats/",gens.names[gen.count],".csv",sep=""), append =F, quote = F, sep = ",",
eol = "\n", na = "", dec = ".", row.names = F,
col.names = F, qmethod = "double")
Rows=100
simScores<-matrix(data = 0, nrow = Rows, ncol = 12, byrow = FALSE,dimnames = NULL);
simScores[,11]<-1;###!!!!!!! this may be necessary for many algorithms
#vector of strings to keep names of each project, increase maximum
gens.names=vector(length = 100)
max.out=vector(length = 100)
max.out.sq=vector(length = 100)
max.out.sq[]<-NA
varimport=matrix(data=0, nrow = 100, ncol = 1000)
#single scalar to keep count
gen.count=0
simScores<-matrix(data = 0, nrow = Rows, ncol = 3, byrow = FALSE,dimnames = NULL);
######ifs nested 2 layer######
gen.count=gen.count+1
gens.names[gen.count]="ifs nested 2 layer"
max.out[gen.count]=1
varim=c(1,1,1,1,1)
varimport[gen.count,1:length(varim)]=varim
for(Row in 1:Rows){
simScores[Row,1:10]=rnorm(10, mean = 0, sd = 1)
}
for(Row in 1:Rows){
if(simScores[Row,3]>.3){
if(simScores[Row,2]>.3){
simScores[Row,1]=-simScores[Row,6]
}else{
simScores[Row,1]=simScores[Row,6]
}
}else{
if(simScores[Row,4]>.3){
simScores[Row,1]=-simScores[Row,5]
}else{
simScores[Row,1]=simScores[Row,5]
}
}
}
write.table(round(simScores,digits  = 3),
file = paste("Generats/",gens.names[gen.count],".csv",sep=""), append =F, quote = F, sep = ",",
eol = "\n", na = "", dec = ".", row.names = F,
col.names = F, qmethod = "double")
write.table(round(simScores,digits  = 3),
file = paste("Generats/",gens.names[gen.count],".csv",sep=""), append =F, quote = F, sep = ",",
eol = "\n", na = "", dec = ".", row.names = F,
col.names = F, qmethod = "double")
source('C:/Users/Dm/Desktop/generated data test/Multiple Generators.R')
gtwd()
gwd()
gtw()
getwd()
?list.files
which.computer<-Sys.info()[['nodename']]
task.subject<-"14th20hp3cv"
out.file<-paste("out",task.subject,which.computer,.Platform$OS.type,.Platform$r_arch,".csv",sep="")
list.files(path = ".") == out.file
list.files(path = "./ALTA") == out.file
which(list.files(path = "./ALTA") == out.file)
length(which(list.files(path = "./ALTA") == out.file))
length(which(list.files(path = paste("./",which.computer)) == out.file)
)
length(which(list.files(path = paste("./",which.computer)) == out.file))<1
paste("./",which.computer)
length(which(list.files(path = paste("./",which.computer,sep = "")) == out.file))<1
length(which(list.files(path = paste("./",which.computer,sep = "")) == out.file))
which(list.files(path = paste("./",which.computer,sep = "")) == out.file)
if(length(which(list.files(path = paste("./",which.computer,sep = "")) == out.file))<1) write.table( "0.01,0.01,100,100,100,Wed Aug 02 16:37:25 2017,dummy,8,1,basic latent features,ignore,none,asis,1.12784979099243,random,333,53,adaptive_cv,16,5,2,2,19,0.0107744822639878,FALSE,,,,,,,,,," ,file = paste(which.computer,"/",out.file,sep=""),  quote = F, sep = ",", row.names = F,col.names = F)
base<-getwd()
base
setwd(paste(base,"/",which.computer,sep = ""))
getwd()
setwd("C:/Users/Dm/Desktop/generated data test")
base.folder<-getwd()
cpout.folder<-paste(base,"/",which.computer,sep = "")
setwd(cpout.folder)
getwd()
out.file
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
setwd("C:/Users/Dm/Desktop/generated data test")
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
setwd("C:/Users/Dm/Desktop/generated data test")
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
setwd("C:/Users/Dm/Desktop/generated data test")
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
setwd("C:/Users/Dm/Desktop/generated data test")
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
setwd("C:/Users/Dm/Desktop/generated data test")
debugSource('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
exit()
stop()
end()
quit()
debugSource('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
debugSource('C:/Users/Dm/Desktop/generated data test/MLR part.R')
debugSource('C:/Users/Dm/Desktop/generated data test/MLR part.R')
debugSource('C:/Users/Dm/Desktop/generated data test/MLR part.R')
debugSource('C:/Users/Dm/Desktop/generated data test/MLR part.R')
debugSource('C:/Users/Dm/Desktop/generated data test/MLR part.R')
fv = generateFilterValuesData(regr.task,
method = c("mrmr","randomForestSRC.rfsrc",
"univariate.model.score"),
nselect<-10)#,,"permutation.importance","randomForestSRC.var.select"
debugSource('C:/Users/Dm/Desktop/generated data test/MLR part.R')
setwd(base.folder)
debugSource('C:/Users/Dm/Desktop/generated data test/MLR part.R')
debugSource('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
imp = impute(training, classes = list(integer = imputeMean(), factor = imputeMode()),
dummy.classes = c("integer","factor"))
imp$data
view(imp$data)
View(before.last.alg)
View(imp$data)
imp$classes
names(imp$classes)
str(imp)
imp$desc$classes
imp = impute(training, classes = list(integer = imputeMedian(), factor = imputeMode()),
dummy.classes = c("numeric","factor"))
View(imp$data)
imp = impute(training, classes = list(numeric = imputeMedian(), factor = imputeMode()),
dummy.classes = c("numeric","factor"))
View(imp$data)
df = data.frame(x = c(1, 1, NA), y = factor(c("a", "a", "b")), z = 1:3)
View(df)
imputed = impute(df, target = character(0), cols = list(x = 99, y = imputeMode()))
print(imputed$data)
reimpute(data.frame(x = NA), imputed$desc)
df = data.frame(x = c(1, 1, NA), y = factor(c("a", "a", "b")), z = 1:3)
imputed = impute(df, target = character(0), cols = list(x = 99, y = imputeMode()))
print(imputed$data)
df = data.frame(x = c(1, 1, NA), y = factor(c("a", NA, "b")), z = 1:3)
imputed = impute(df, target = character(0), cols = list(x = 99, y = imputeMode()))
print(imputed$data)
imputed = impute(df, target = character(0),  classes = list(numeric = imputeMedian(), factor = imputeMode()),
dummy.classes = c("numeric","factor"))
print(imputed$data)
imp = impute(training, classes = list(numeric = imputeMedian()),
dummy.classes = "numeric")
View(training)
imp = impute(training, classes = list(numeric = 0),
dummy.classes = "numeric")
imp = impute(training, classes = list(numeric = 0),
dummy.classes = "numeric")
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
str(testing)
str(training)
str(training[,228:length(training[1,])])
str(training[,228:length(training[1,])])
length(training[1,])
length(training[,])
length(training[,1])
str(training[,99:length(training[1,])])
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
setwd("C:/Users/Dm/Desktop/generated data test")
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
setwd("C:/Users/Dm/Desktop/generated data test")
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
