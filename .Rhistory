col.names = F, qmethod = "double")
write.table(paste("Fail",date(),allmodel,  sep = ", "),
file = "backup.csv", append =TRUE, quote = F, sep = ",",
eol = "\n", na = "NA", dec = ".", row.names = F,
col.names = F, qmethod = "double")
}
if(not.failed==1) {
write.table(paste("Succ",date(),allmodel,  sep = ", "),
file = "backup.csv", append =TRUE, quote = F, sep = ",",
eol = "\n", na = "NA", dec = ".", row.names = F,
col.names = F, qmethod = "double")}
}
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
getLearnerPackages(allmodel)
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
debugSource('C:/Users/Dm/Desktop/generated data test/MLR part.R')
predicted.outcomes<-predict(mod, newdata=(testing))
p <- data.frame(predicted.outcomes$data[,2],testing[,1])
try({mod<-train(allmodel, regr.task)
>
mod<-train(allmodel, regr.task)
predicted.outcomes<-predict(mod, newdata=(testing))
p <- data.frame(predicted.outcomes$data[,2],testing[,1])
Rsqd=1-RMSE(p[,1],p[,2])/RMSE(p[,2],mean(p[,2], na.rm = T))
mean.improvement=1-MAE(p[,1],p[,2])/MAE(p[,2],mean(p[,2], na.rm = T))
p<- data.frame(predict(loess.model,predicted.outcomes),y.untransformed[-inTrain])
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
library(mlrHyperopt)
devtools::install_github("berndbischl/ParamHelpers") # version >= 1.11 needed.
R.utils::gcDLLs()
install.packages("R.utils")
R.utils::gcDLLs()
devtools::install_github("berndbischl/ParamHelpers") # version >= 1.11 needed.
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
setwd("C:/Users/Dm/Desktop/generated data test")
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
install.packages("swirl")
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
library(mlrHyperopt)
R.utils::gcDLLs()
devtools::install_github("berndbischl/ParamHelpers") # version >= 1.11 needed.
install.packages("ParamHelpers")
devtools::install_github("jakob-r/mlrHyperopt", dependencies = TRUE)
list.of.packages <- c("ParamHelpers","devtools")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, dep = TRUE)
devtools::install_github("jakob-r/mlrHyperopt", dependencies = TRUE)
devtools::install_github("berndbischl/ParamHelpers") # version >= 1.11 needed.
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
library(mlr)
library(mlbench)
configureMlr(on.learner.error = "warn")
regr.task = makeRegrTask(id = "recc", data = training, target = "V1")
library(mlrHyperopt)
res = hyperopt(regr.task, learner = "regr.svm")
hyper.control<-makeHyperControl(mlr.control = makeTuneControlRandom(maxit = 20),
resampling = cv3,
measures = mse)
res = hyperopt(regr.task, learner = "regr.svm")
res = hyperopt(regr.task, learner = "regr.svm", hyper.control =hyper.control)
res
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Expirament analysis.R')
z<-ggplot(I.fails.df, aes(y = I.fails.df[,4], x = reorder(I.fails.df[,1], I.fails.df[,5]))) + geom_point()+ coord_flip()
z+ geom_point(colour="red",aes(I.fails.df[,1] ,I.fails.df[,3]),na.rm = TRUE)+
geom_point(colour="blue",aes(I.fails.df[,1] ,I.fails.df[,2]))+
geom_point(colour="green",aes(I.fails.df[,1] ,(I.fails.df[,5]*.5*max(I.fails.df[,2]))))+
ylab(paste("Failures, R %fail/NA, Bu Attempts, Bk NA, G Fails")) + xlab("")
setwd("C:/Users/Dm/Desktop/generated data test")
source('C:/Users/Dm/Desktop/generated data test/Expirament analysis.R')
gene.expect
gene.expect[,3]<-1
gene.expect
out<-data.frame(acceptAlgo.df[,1:2],gene.expect[,3],acceptAlgo.df[,3:length(acceptAlgo.df[1,])])
write.table(out,
file = paste(exp.name,acceptablePloss,"MinNecessary.csv", sep = ""), append =F, quote = F, sep = ",",
eol = "\n", na = "", dec = ".", row.names = F,
col.names = F, qmethod = "double")
######power to detect#####
exp.res.noF<-expiramentresults[,1]
exp.res.noF<-as.numeric(levels(exp.res.noF))[exp.res.noF]
exp.res.noF[is.na(exp.res.noF)]<-0
exp.res.noF[exp.res.noF<0]<-0
algPower.df<-data.frame()
countr=0
for(algo in unique(expiramentresults[,7]))
{
countr=countr+1
only.algo<-as.logical((expiramentresults[,7]==algo)*(expiramentresults[,1]!="Fail"))
only.algo[is.na(only.algo)]<-F
if(sum(only.algo, na.rm=T)<1) {
countr=countr-1
next()}
algPower.df[countr,1]<-algo
algPower.df[countr,2]<-round(mean(exp.res.noF[only.algo],na.rm = T),digits = 3)
}
algo.max<-vector()
for(countr in 1:length(exp.res.noF)){
for(task in 1:length(power.df[,1])){
if(power.df[task,1]==expiramentresults[countr,10]){
algo.max[countr]<-power.df[task,5]}}}
algo.max[algo.max<.2]<-.2
exp.res.noF<-exp.res.noF/algo.max
#exp.res.noF<-exp.res.noF+1-algo.max
#algPower.df<-data.frame()
countr=0
for(algo in unique(expiramentresults[,7]))
{
countr=countr+1
only.algo<-as.logical((expiramentresults[,7]==algo)*(expiramentresults[,1]!="Fail"))
only.algo[is.na(only.algo)]<-F
if(sum(only.algo, na.rm=T)<1) {
countr=countr-1
next()}
#algPower.df[countr,1]<-algo
algPower.df[countr,3]<-min(exp.res.noF[only.algo],na.rm = T)
algPower.df[countr,4]<-median(exp.res.noF[only.algo],na.rm = T)
#algPower.df[countr,4]<-round(mean(exp.res.noF[only.algo],na.rm = T),digits = 3)
algPower.df[countr,5]<-max(exp.res.noF[only.algo],na.rm = T)
algPower.df[countr,6]<-sum(only.algo, na.rm=T)
algPower.df[countr,7]<-round(quantile(exp.res.noF[only.algo], probs = c(.7), na.rm =T),digits = 3)
algPower.df[countr,8]<-round(quantile(exp.res.noF[only.algo], probs = c(.8), na.rm =T),digits = 3)
algPower.df[countr,9]<-round(quantile(exp.res.noF[only.algo], probs = c(.9), na.rm =T),digits = 3)
}
iti <- order(algPower.df[,4],algPower.df[,8])
algPower.df<-rbind(algPower.df)[iti,]
write.table(algPower.df,
file = paste(exp.name,"Power.csv", sep = ""), append =F, quote = F, sep = ",",
eol = "\n", na = "", dec = ".", row.names = F,
col.names = F, qmethod = "double")
#algPower.df<-data.frame(algPower.df, row.names = 1:length(algPower.df[,1]))
not.interesting<-(algPower.df[,6]<20)+(algPower.df[,4]<.2)+ is.na(algPower.df[,6])
I.power.df<-algPower.df[!not.interesting,]
z<-ggplot(I.power.df, aes(y = I.power.df[,2], x = reorder(I.power.df[,1], I.power.df[,2]))) +
geom_point()+#+##+coord_flip()
theme(axis.text.x=element_text(size=7, angle=270,hjust=0.95,vjust=0.2))+scale_x_discrete(position = "top")
z+ geom_point(colour="red",aes(I.power.df[,1] ,I.power.df[,8]),na.rm = TRUE)+
geom_point(colour="blue",aes(I.power.df[,1] ,I.power.df[,5]))+
xlab("") + ylab("%MAE, ord. by mean, G Succ.Attempts, Bk mean, Bu P R Max 90 80 quant of max for task") +
geom_point(colour="purple",aes(I.power.df[,1] ,I.power.df[,9]))+
geom_point(colour="green",aes(I.power.df[,1] ,(I.power.df[,6]/max(I.power.df[,6])-.45)))
ggsave(paste(exp.name,"Power.png", sep = ""),plot = last_plot(),scale = 3)
#some tasks are harder and thus improvement in them should count for more
#that affects the black mean but not red-blue bc 1-0 is % of max score on that task
#some algos are better at some category of tasks and these tasks are overepresented
#that affects the black mean but less red-blue bc as only method's best 20% matter
z<-ggplot(I.power.df, aes(y = I.power.df[,2], x = reorder(I.power.df[,1], I.power.df[,8]))) +
geom_point()+#+##+coord_flip()
theme(axis.text.x=element_text(size=7, angle=270,hjust=0.95,vjust=0.2))+scale_x_discrete(position = "top")
z+ geom_point(colour="red",aes(I.power.df[,1] ,I.power.df[,8]),na.rm = TRUE)+
geom_point(colour="blue",aes(I.power.df[,1] ,I.power.df[,5]))+
xlab("") + ylab("%MAE, ord. by 80%, G Succ.Attempts, Bk mean, Bu P R Max 90 80 quant of max for task") +
geom_point(colour="purple",aes(I.power.df[,1] ,I.power.df[,9]))+
geom_point(colour="green",aes(I.power.df[,1] ,(I.power.df[,6]/max(I.power.df[,6])-.45)))
ggsave(paste(exp.name,"PowerReorder.png", sep = ""),plot = last_plot(),scale = 3)
z<-ggplot(I.power.df, aes(y = I.power.df[,2], x = reorder(I.power.df[,1], I.power.df[,9]))) +
geom_point()+#+##+coord_flip()
theme(axis.text.x=element_text(size=7, angle=270,hjust=0.95,vjust=0.2))+scale_x_discrete(position = "top")
z+ geom_point(colour="red",aes(I.power.df[,1] ,I.power.df[,8]),na.rm = TRUE)+
geom_point(colour="blue",aes(I.power.df[,1] ,I.power.df[,5]))+
xlab("") + ylab("%MAE, ord. by 90%, G Succ.Attempts, Bk mean, Bu P R Max 90 80 quant of max for task") +
geom_point(colour="purple",aes(I.power.df[,1] ,I.power.df[,9]))+
geom_point(colour="green",aes(I.power.df[,1] ,(I.power.df[,6]/max(I.power.df[,6])-.45)))
ggsave(paste(exp.name,"PowerReorder2.png", sep = ""),plot = last_plot(),scale = 3)
################end#######
setwd(file.path(mainDir))
out<-data.frame(acceptAlgo.df[,1:2],gene.expect[,3],acceptAlgo.df[,3:length(acceptAlgo.df[1,])])
write.table(out,
file = paste(exp.name,acceptablePloss,"MinNecessary.csv", sep = ""), append =F, quote = F, sep = ",",
eol = "\n", na = "", dec = ".", row.names = F,
col.names = F, qmethod = "double")
out<-data.frame(acceptAlgo.df[,1:2],gene.expect[,3],acceptAlgo.df[,3:length(acceptAlgo.df[1,])])
gene.expect
countof.generators<-sum(gene.expect[,2])
countof.generators<-sum(as.logical(gene.expect[,2]))
countof.generators
as.logical(gene.expect[,2])
gene.expect[,2]
out<-data.frame(acceptAlgo.df[,1:2],gene.expect[,3],acceptAlgo.df[,3:length(acceptAlgo.df[1,])])
acceptAlgo.df[,1:2]
out<-data.frame(acceptAlgo.df[,1:2],gene.expect[length(acceptAlgo.df[,1:2]),3],acceptAlgo.df[,3:length(acceptAlgo.df[1,])])
write.table(out,
file = paste(exp.name,acceptablePloss,"MinNecessary.csv", sep = ""), append =F, quote = F, sep = ",",
eol = "\n", na = "", dec = ".", row.names = F,
col.names = F, qmethod = "double")
out
length(acceptAlgo.df[,1:2])
acceptAlgo.df[,1:2]
out<-data.frame(acceptAlgo.df[,1:2],gene.expect[length(acceptAlgo.df[,1]),3],acceptAlgo.df[,3:length(acceptAlgo.df[1,])])
out
out<-data.frame(acceptAlgo.df[,1:2],acceptAlgo.df[,3:length(acceptAlgo.df[1,])])
write.table(out,
file = paste(exp.name,acceptablePloss,"MinNecessary.csv", sep = ""), append =F, quote = F, sep = ",",
eol = "\n", na = "", dec = ".", row.names = F,
col.names = F, qmethod = "double")
out
acceptablePloss<-.05
lowestFindScore<-.01
acceptAlgo.df<-data.frame()
acceptAlgo.df[1,1]<-NA
acceptAlgo.df[,c(1:400)]<-NA
acceptAlgo.Rdf<-data.frame()
acceptAlgo.Rdf[1,1]<-NA
acceptAlgo.Rdf[,c(1:400)]<-NA
countr=0
for(algo in unique(expiramentresults[,10]))
{
countr=countr+1
only.algo<-as.logical((expiramentresults[,10]==algo)*(expiramentresults[,1]!="Fail"))
only.algo[is.na(only.algo)]<-F
if(sum(only.algo, na.rm=T)<1) {
countr=countr-1
next()}
taskSeek=(power.df[,1]==algo)
if(power.df[taskSeek,5]<lowestFindScore) {countr=countr-1 ; next()}
minAccept<-power.df[taskSeek,5]*(1-acceptablePloss)
acceptAlgo.df[countr,1]<-algo
acceptAlgo<-as.logical((exp.res.noF>minAccept)*only.algo)
acceptAlgo.df[countr,2]<-sum(acceptAlgo)
acceptAlgo.df[countr,3]<-power.df[taskSeek,5]
acceptAlgo.df[countr,4:(sum(acceptAlgo)+3)]<-as.character(expiramentresults[acceptAlgo,7])
acceptAlgo.Rdf[countr,4:(sum(acceptAlgo)+3)]<-as.numeric(as.character(expiramentresults[acceptAlgo,1]))
}
for(countr in 1:length(acceptAlgo.df[,3]))
{
iti <- order(as.numeric(acceptAlgo.Rdf[countr,4:(acceptAlgo.df[countr,2]+3)]), decreasing = T)
acceptAlgo.df[countr,4:(acceptAlgo.df[countr,2]+3)]<-(acceptAlgo.df[countr,4:(acceptAlgo.df[countr,2]+3)])[iti]
}
iti <- order(acceptAlgo.df[,3],acceptAlgo.df[,2])
#acceptAlgo.df<-rbind(acceptAlgo.df)[iti,]
gene.expect[,3]<-1#,gene.expect[length(acceptAlgo.df[,1]),3]
out<-data.frame(acceptAlgo.df[,1:2],acceptAlgo.df[,3:length(acceptAlgo.df[1,])])
write.table(out,
file = paste(exp.name,acceptablePloss,"MinNecessary.csv", sep = ""), append =F, quote = F, sep = ",",
eol = "\n", na = "", dec = ".", row.names = F,
col.names = F, qmethod = "double")
out
source('C:/Users/Dm/Desktop/generated data test/Expirament analysis.R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
res
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
mod
predicted.outcomes<-predict(mod, newdata=(testing))
mod$mse.test.mean
mod
str(mod)
mod$x
mod$y
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
write.table(mod$y,
file = "hyperopt.csv", append =TRUE, quote = F, sep = ",",
eol = "\n", na = "NA", dec = ".", row.names = F,
col.names = F, qmethod = "double")
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
mod$y
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
mod$y
mod
mod<-hyperopt(regr.task, learner = allmodel, hyper.control =hyper.control)
mod$y
write.table(mod$y,
file = "hyperopt.csv", append =TRUE, quote = F, sep = ",",
eol = "\n", na = "NA", dec = ".", row.names = F,
col.names = F, qmethod = "double")
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
install.packages(c("agricolae", "argparse", "arules", "assertthat", "batchtools", "BH", "bibtex", "BMA", "BradleyTerry2", "BSDA", "candisc", "car", "CARBayes", "caret", "cba", "circlize", "Ckmeans.1d.dp", "clue", "clusterSim", "coin", "colorspace", "corrgram", "covr", "crayon", "cubature", "curl", "DBI", "DBItest", "deldir", "DescTools", "devtools", "DiagrammeR", "digest", "DoE.base", "dplyr", "earth", "effects", "epitools", "evaluate", "FactoMineR", "fastICA", "fastR", "fftw", "fields", "fit.models", "flexmix", "forecast", "Formula", "gam", "gamlss", "gamlss.dist", "gdata", "GGally", "glmnet", "gmp", "GPareto", "gridExtra", "h2o", "heplots", "Hmisc", "HSAUR", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "hunspell", "igraph", "irace", "janeaustenr", "kohonen", "KRLS", "L1pack", "lintr", "lme4", "lsmeans", "magick", "mapproj", "maps", "markdown", "MBESS", "mboost", "mclust", "MCMCpack", "mediation", "memoise", "metafor", "mixtools", "mosaic", "multcomp", "mvtnorm", "nanotime", "np", "NSM3", "openssl", "ordinalNet", "partitions", "party", "pbapply", "PBSmapping", "pcaPP", "pdftools", "pec", "plotmo", "plotrix", "pracma", "prefmod", "pROC", "pscl", "psych", "quantmod", "quantreg", "R.rsp", "R6", "RandomFields", "RandomFieldsUtils", "randomForestSRC", "RankAggreg", "RANN", "rattle", "Rborist", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "relations", "reshape", "Rfast", "rgdal", "rgeos", "riskRegression", "rlang", "RMySQL", "robust", "RODBC", "rpart.plot", "RPostgreSQL", "RSQLite", "rstudioapi", "Rsymphony", "rticles", "sandwich", "scales", "scatterplot3d", "segmented", "sem", "sfsmisc", "shiny", "smoof", "sp", "spam", "SparseM", "spatstat", "spatstat.utils", "spdep", "stabs", "statnet.common", "stringr", "subselect", "SuperLearner", "survival", "svglite", "testit", "TH.data", "tibble", "tidyr", "tseries", "TTR", "vegan", "viridis", "withr", "XML", "xts", "zoo"))
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
mod$opt.path$par.set
res$opt.path$par.set
res = hyperopt(regr.task, learner = "regr.svm", hyper.control =hyper.control)
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
install.packages(c("agricolae", "argparse", "arules", "assertthat", "batchtools", "BH", "bibtex", "BMA", "BradleyTerry2", "BSDA", "candisc", "car", "CARBayes", "caret", "cba", "circlize", "Ckmeans.1d.dp", "clue", "clusterSim", "coin", "colorspace", "corrgram", "covr", "crayon", "cubature", "curl", "DBI", "DBItest", "deldir", "DescTools", "devtools", "DiagrammeR", "digest", "DoE.base", "dplyr", "earth", "effects", "epitools", "evaluate", "FactoMineR", "fastICA", "fastR", "fftw", "fields", "fit.models", "flexmix", "forecast", "Formula", "gam", "gamlss", "gamlss.dist", "gdata", "GGally", "glmnet", "gmp", "GPareto", "gridExtra", "h2o", "heplots", "Hmisc", "HSAUR", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "hunspell", "igraph", "irace", "janeaustenr", "kohonen", "KRLS", "L1pack", "lintr", "lme4", "lsmeans", "magick", "mapproj", "maps", "markdown", "MBESS", "mboost", "mclust", "MCMCpack", "mediation", "memoise", "metafor", "mixtools", "mosaic", "multcomp", "mvtnorm", "nanotime", "np", "NSM3", "openssl", "ordinalNet", "partitions", "party", "pbapply", "PBSmapping", "pcaPP", "pdftools", "pec", "plotmo", "plotrix", "pracma", "prefmod", "pROC", "pscl", "psych", "quantmod", "quantreg", "R.rsp", "R6", "RandomFields", "RandomFieldsUtils", "randomForestSRC", "RankAggreg", "RANN", "rattle", "Rborist", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "relations", "reshape", "Rfast", "rgdal", "rgeos", "riskRegression", "rlang", "RMySQL", "robust", "RODBC", "rpart.plot", "RPostgreSQL", "RSQLite", "rstudioapi", "Rsymphony", "rticles", "sandwich", "scales", "scatterplot3d", "segmented", "sem", "sfsmisc", "shiny", "smoof", "sp", "spam", "SparseM", "spatstat", "spatstat.utils", "spdep", "stabs", "statnet.common", "stringr", "subselect", "SuperLearner", "survival", "svglite", "testit", "TH.data", "tibble", "tidyr", "tseries", "TTR", "vegan", "viridis", "withr", "XML", "xts", "zoo"))
library("tgp", lib.loc="~/R/win-library/3.3")
install.packages("tgp")
library("tgp", lib.loc="~/R/win-library/3.3")
detach("package:tgp", unload=TRUE)
install.packages("tgp")
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
write.table(c(round(mean.improvement,digits = 3),round(Rsqd,digits = 3),
round(overRMSE,digits = 3),round(RMSE,digits = 3),round(MMAAEE,digits = 3),
date(),allmodel,column.to.predict,trans.y,datasource,missingdata,
withextra,norming,RMSE.mean,NoHyper,seed.var,round(proc.time()[3]-when[3]),
NoAp,NoAp,NoAp,NoAp,NoAp,NoAp),
file = "gen test out.csv", append =TRUE, quote = F, sep = ",",
eol = "\n", na = "NA", dec = ".", row.names = F,
col.names = F, qmethod = "double")
write.table(c(round(mean.improvement,digits = 3),round(Rsqd,digits = 3),
round(overRMSE,digits = 3),round(RMSE,digits = 3),round(MMAAEE,digits = 3),
date(),allmodel,column.to.predict,trans.y,datasource,missingdata,
withextra,norming,RMSE.mean,NoHyper,seed.var,round(proc.time()[3]-when[3]),
NoAp,NoAp,NoAp,NoAp,NoAp,NoAp),
file = "gen test out.csv", append =TRUE, quote = F, sep = " ,",
eol = "\n", na = "NA", dec = ".", row.names = F,
col.names = F, qmethod = "double")
write.table(c(round(mean.improvement,digits = 3),round(Rsqd,digits = 3),
round(overRMSE,digits = 3),round(RMSE,digits = 3),round(MMAAEE,digits = 3),
date(),allmodel,column.to.predict,trans.y,datasource,missingdata,
withextra,norming,RMSE.mean,NoHyper,seed.var,round(proc.time()[3]-when[3]),
NoAp),
file = "gen test out.csv", append =TRUE, quote = F, sep = " ,",
eol = "\n", na = "NA", dec = ".", row.names = F,
col.names = F, qmethod = "double")
write.table(c(round(mean.improvement,digits = 3),round(Rsqd,digits = 3),
round(overRMSE,digits = 3),round(RMSE,digits = 3),round(MMAAEE,digits = 3),
date(),allmodel,column.to.predict,trans.y,datasource,missingdata,
withextra,norming,RMSE.mean,adaptControl$search,seed.var,round(proc.time()[3]-when[3]),
adaptControl$method,tuneLength,adaptControl$number,adaptControl$repeats,
adaptControl$adaptive$min,trainedmodel$bestTune),
file = "gen test out.csv", append =TRUE, quote = F, sep = ",",
eol = "\n", na = "NA", dec = ".", row.names = F,
col.names = F, qmethod = "double")
write.table(c(round(mean.improvement,digits = 3),round(Rsqd,digits = 3),
round(overRMSE,digits = 3),round(RMSE,digits = 3),round(MMAAEE,digits = 3),
date(),allmodel,column.to.predict,trans.y,datasource,missingdata,
withextra,norming,RMSE.mean,NoHyper,seed.var,round(proc.time()[3]-when[3]),
adaptControl$method,tuneLength,adaptControl$number,adaptControl$repeats,
adaptControl$adaptive$min,trainedmodel$bestTune),
file = "gen test out.csv", append =TRUE, quote = F, sep = ",",
eol = "\n", na = "NA", dec = ".", row.names = F,
col.names = F, qmethod = "double")
write.table(c(round(mean.improvement,digits = 3),round(Rsqd,digits = 3),
round(overRMSE,digits = 3),round(RMSE,digits = 3),round(MMAAEE,digits = 3),
date(),allmodel,column.to.predict,trans.y,datasource,missingdata,
withextra,norming,RMSE.mean,NoHyper,seed.var,round(proc.time()[3]-when[3]),
NoAp,tuneLength,adaptControl$number,adaptControl$repeats,
adaptControl$adaptive$min,trainedmodel$bestTune),
file = "gen test out.csv", append =TRUE, quote = F, sep = ",",
eol = "\n", na = "NA", dec = ".", row.names = F,
col.names = F, qmethod = "double")
write.table(c(round(mean.improvement,digits = 3),round(Rsqd,digits = 3),
round(overRMSE,digits = 3),round(RMSE,digits = 3),round(MMAAEE,digits = 3),
date(),allmodel,column.to.predict,trans.y,datasource,missingdata,
withextra,norming,RMSE.mean,NoHyper,seed.var,round(proc.time()[3]-when[3]),
adaptControl$method,tuneLength,adaptControl$number,adaptControl$repeats,
NoAp,NoAp),
file = "gen test out.csv", append =TRUE, quote = F, sep = ",",
eol = "\n", na = "NA", dec = ".", row.names = F,
col.names = F, qmethod = "double")
write.table(c(round(mean.improvement,digits = 3),round(Rsqd,digits = 3),
round(overRMSE,digits = 3),round(RMSE,digits = 3),round(MMAAEE,digits = 3),
date(),allmodel,column.to.predict,trans.y,datasource,missingdata,
withextra,norming,RMSE.mean,NoHyper,seed.var,round(proc.time()[3]-when[3]),
adaptControl$method,tuneLength,adaptControl$number,adaptControl$repeats,
adaptControl$adaptive$min,NoAp),
file = "gen test out.csv", append =TRUE, quote = F, sep = ",",
eol = "\n", na = "NA", dec = ".", row.names = F,
col.names = F, qmethod = "double")
write.table(c(round(mean.improvement,digits = 3),round(Rsqd,digits = 3),
round(overRMSE,digits = 3),round(RMSE,digits = 3),round(MMAAEE,digits = 3),
date(),allmodel,column.to.predict,trans.y,datasource,missingdata,
withextra,norming,RMSE.mean,NoHyper,seed.var,round(proc.time()[3]-when[3]),
adaptControl$method,tuneLength,adaptControl$number,adaptControl$repeats,
adaptControl$adaptive$min,trainedmodel$bestTune),
file = "gen test out.csv", append =TRUE, quote = F, sep = ",",
eol = "\n", na = "NA", dec = ".", row.names = F,
col.names = F, qmethod = "double")
write.table(c(round(mean.improvement,digits = 3),round(Rsqd,digits = 3),
round(overRMSE,digits = 3),round(RMSE,digits = 3),round(MMAAEE,digits = 3),
date(),allmodel,column.to.predict,trans.y,datasource,missingdata,
withextra,norming,RMSE.mean,NoHyper,seed.var,round(proc.time()[3]-when[3]),
adaptControl$method,tuneLength,adaptControl$number,adaptControl$repeats,
adaptControl$adaptive$min,RMSE.mean),
file = "gen test out.csv", append =TRUE, quote = F, sep = ",",
eol = "\n", na = "NA", dec = ".", row.names = F,
col.names = F, qmethod = "double")
write.table(c(round(mean.improvement,digits = 3),round(Rsqd,digits = 3),
round(overRMSE,digits = 3),round(RMSE,digits = 3),round(MMAAEE,digits = 3),
date(),allmodel,column.to.predict,trans.y,datasource,missingdata,
withextra,norming,RMSE.mean,NoHyper,seed.var,round(proc.time()[3]-when[3]),
adaptControl$method,tuneLength,adaptControl$number,adaptControl$repeats,
adaptControl$adaptive$min,trainedmodel$bestTune),
file = "gen test out.csv", append =TRUE, quote = F, sep = ",",
eol = "\n", na = "NA", dec = ".", row.names = F,
col.names = F, qmethod = "double")
write.table(c(round(mean.improvement,digits = 3),round(Rsqd,digits = 3),
round(overRMSE,digits = 3),round(RMSE,digits = 3),round(MMAAEE,digits = 3),
date(),allmodel,column.to.predict,trans.y,datasource,missingdata,
withextra,norming,RMSE.mean,NoHyper,seed.var,round(proc.time()[3]-when[3]),
adaptControl$method,tuneLength,adaptControl$number,adaptControl$repeats,
adaptControl$adaptive$min,trainedmodel$bestTune),
file = "gen test out.csv", append =TRUE, quote = F, sep = ",",
eol = "\n", na = "NA", dec = ".", row.names = F,
col.names = F, qmethod = "double")
write.table(c(round(mean.improvement,digits = 3),round(Rsqd,digits = 3),
round(overRMSE,digits = 3),round(RMSE,digits = 3),round(MMAAEE,digits = 3),
date(),allmodel,column.to.predict,trans.y,datasource,missingdata,
withextra,norming,RMSE.mean,NoHyper,seed.var,round(proc.time()[3]-when[3]),
adaptControl$method,tuneLength,adaptControl$number,adaptControl$repeats,
adaptControl$adaptive$min,trainedmodel$bestTune),
file = "gen test out.csv", append =TRUE, quote = F, sep = ",",
eol = "\n", na = "NA", dec = ".", row.names = F,
col.names = F, qmethod = "double")
write.table(c(round(mean.improvement,digits = 3),round(Rsqd,digits = 3),
round(overRMSE,digits = 3),round(RMSE,digits = 3),round(MMAAEE,digits = 3),
date(),allmodel,column.to.predict,trans.y,datasource,missingdata,
withextra,norming,RMSE.mean,NoHyper,seed.var,round(proc.time()[3]-when[3]),
adaptControl$method,NoAp,NoAp,adaptControl$repeats,
NoAp,trainedmodel$bestTune),
file = "gen test out.csv", append =TRUE, quote = F, sep = ",",
eol = "\n", na = "NA", dec = ".", row.names = F,
col.names = F, qmethod = "double")
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
mod$x
mod$y
source('C:/Users/Dm/Desktop/generated data test/MLR part.R')
debugSource('C:/Users/Dm/Desktop/generated data test/MLR part.R')
mod$y
mod$x
?train
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
data.source<-as.data.frame(read.csv("C:\Users\Dm\Desktop\kaggle\train.csv", sep = ","), sep = ",",fill=TRUE, header = FALSE,quote="",dec="."))
data.source<-as.data.frame(read.csv("C:\Users\Dm\Desktop\kaggle\train.csv", sep = ","), sep = ",",fill=TRUE, header = FALSE,quote="",dec="."))
data.source<-as.data.frame(read.csv("train.csv", sep = ","), sep = ",",fill=TRUE, header = FALSE,quote="",dec="."))
data.source<-as.data.frame(read.csv("train.csv", sep = ",",fill=TRUE, header = FALSE,quote="",dec="."))
data.source<-as.data.frame(read.csv("C:\Users\Dm\Desktop\kaggle\train.csv", sep = ",",fill=TRUE, header = FALSE,quote="",dec="."))
data.source<-as.data.frame(read.csv("kaggle train.csv", sep = ",",fill=TRUE, header = T,quote="",dec="."))
View(data.source)
library(caret)
dummies <- dummyVars(V81 ~ ., data = data.source)
dummies <- dummyVars(V4 ~ ., data = data.source)
View(data.source)
dummies <- dummyVars(SalePrice ~ ., data = data.source)
dummies
data.source2<-data.frame(data.source,predict(dummies, newdata = data.source))
View(data.source2)
head(data.source2)
data.source3<-data.frame(data.source2[,81:370])
View(data.source3)
View(data.source)
data.source3[,1]<-log(data.source3[,1])
log(data.source3[,1])
data.source3[,1]<-log(data.source3[,1])
data.source3<-data.frame(data.source2[,81:370])
data.source3[,1]<-log(data.source3[,1])
meannie<-mean(data.source3[,1])
meannie
t
data.source3<-data.frame(data.source2[,81:370])
data.source3[,1]<-log(data.source3[,1])
meannie<-mean(data.source3[,1])
meannie
RMSE.mean=RMSE(data.source3[,1],meannie)
RMSE.mean
.1/RMSE.mean
1-.1/RMSE.mean
write.table(data.source3,
file = paste("kaggle housing",".csv",sep=""), append =F, quote = F, sep = ",",
eol = "\n", na = "", dec = ".", row.names = F,
col.names = F, qmethod = "double")
library(mlr)
mlrallmodels<-listLearners("regr")
mlrallmodels
View(mlrallmodels)
debugSource('C:/Users/Dm/Desktop/generated data test/MLR part.R')
setwd("C:/Users/Dm/Desktop/generated data test")
debugSource('C:/Users/Dm/Desktop/generated data test/MLR part.R')
debugSource('C:/Users/Dm/Desktop/generated data test/MLR part.R')
