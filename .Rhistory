source('C:/Users/Dm/Desktop/generated data test/boltzman machines.R')
View(v)
Var1 <- c(rep(1, 50), rep(0, 50))
Var2 <- c(rep(0, 50), rep(1, 50))
x3 <- matrix(c(Var1, Var2), nrow = 100, ncol = 2)
r1 <- rbm.train(x3, 3, numepochs = 20, cd = 10)
v <- c(0.2, 0.8)
h <- rbm.up(r1, v)
View(h)
source('C:/Users/Dm/Desktop/generated data test/boltzman machines.R')
View(h2)
View(v2)
source('C:/Users/Dm/Desktop/generated data test/boltzman machines.R')
source('C:/Users/Dm/Desktop/generated data test/boltzman machines.R')
source('C:/Users/Dm/Desktop/generated data test/boltzman machines.R')
source('C:/Users/Dm/Desktop/generated data test/boltzman machines.R')
source('C:/Users/Dm/Desktop/generated data test/boltzman machines.R')
View(h2)
View(v2)
source('C:/Users/Dm/Desktop/generated data test/boltzman machines.R')
trainRBM(rbm, x3)
library(darch)
library(deepnet)
trainRBM(rbm, x3)
trainRBM(rbm, x3)
data(iris)
model <- darch(Species ~ ., iris)
print(model)
predictions <- predict(model, newdata = iris, type = "class")
cat(paste("Incorrect classifications:", sum(predictions != iris[,5])))
trainData <- matrix(c(0,0,0,1,1,0,1,1), ncol = 2, byrow = TRUE)
trainTargets <- matrix(c(0,1,1,0), nrow = 4)
model2 <- darch(trainData, trainTargets, layers = c(2, 10, 1),
darch.numEpochs = 500, darch.stopClassErr = 0, retainData = T)
e <- darchTest(model2)
cat(paste0("Incorrect classifications on all examples: ", e[3], " (",
e[2], "%)\n"))
plot(model2)
trainData
trainTargets
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
predicted.outcomes<-predict(m, newdata=(testing))
m = train(lrn, regr.task)
mod$x
m = train(lrn, regr.task)
regr.task
lrn
source('C:/Users/Dm/Desktop/generated data test/Expirament analysis.R')
z<-ggplot(I.time.df, aes(y = I.time.df[,3], x = reorder(I.time.df[,1], I.time.df[,3]))) + geom_point()+ coord_flip()
z+   geom_point(colour="blue",aes(I.time.df[,1] ,I.time.df[,2]))+
ylab(paste("time taken in log seconds, min and Median")) + xlab("")
setwd("C:/Users/Dm/Desktop/generated data test")
source('C:/Users/Dm/Desktop/generated data test/Expirament analysis.R')
setwd("C:/Users/Dm/Desktop/generated data test")
source('C:/Users/Dm/Desktop/generated data test/Expirament analysis.R')
?matrix
source('C:/Users/Dm/Desktop/generated data test/Expirament analysis.R')
setwd("C:/Users/Dm/Desktop/generated data test")
source('C:/Users/Dm/Desktop/generated data test/Expirament analysis.R')
source('C:/Users/Dm/Desktop/generated data test/Var Imp Fil cluster.R')
source('C:/Users/Dm/Desktop/generated data test/Var Imp Fil cluster.R')
debugSource('C:/Users/Dm/Desktop/generated data test/Var Imp Fil cluster.R')
u.learns
View(VarImpResults)
debugSource('C:/Users/Dm/Desktop/generated data test/Var Imp Fil cluster.R')
View(VarImpResults)
debugSource('C:/Users/Dm/Desktop/generated data test/Var Imp Fil cluster.R')
debugSource('C:/Users/Dm/Desktop/generated data test/Var Imp Fil cluster.R')
source('C:/Users/Dm/Desktop/generated data test/Var Imp Fil cluster.R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Caret part.R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/run comparison.R')
for(r in 1:length(runsTcompare[,1])){
ttdd<-data.frame((runcomp[r,,]))
ttdd[ttdd==2]<-NA
maxttdd<-data.frame((maxruncomp[r,,]))
colnames(ttdd)<-u.gens
ttdd<-t(ttdd)
means<-vector()
for(m in 1:length(u.gens)){
means[m]<-mean(as.numeric(ttdd[m,]),na.rm = T)}
ordos<- order(means,ttdd[,1])
ttdd<-rbind(ttdd)[ordos,]
for(m in 1:length(u.gens)){
means[m]<-mean(as.numeric(ttdd[m,]),na.rm = T)}
ttdd<-ttdd[,!is.nan(means)]
ttdd<-t(ttdd)
exp.name<-runsTcompare[r,3]
p <- ggplot(melt(ttdd), aes(x=(melt(ttdd)[,2]),y=melt((ttdd))[,3]))
p  + geom_boxplot(width=0.4)+ stat_summary(fun.y = "mean", colour = "red", size = 1, geom = "point")+
theme(axis.text.x=element_text(size=7, angle=270,hjust=1,vjust=0.3))+scale_x_discrete(position = "top")+
xlab(paste("gens in",exp.name)) + ylab("diff")
ggsave(paste(exp.name," and boxes per generator.png", sep = ""),plot = last_plot(),scale = 3)
}
p <- ggplot(melt(ttdd), aes(x=(melt(ttdd)[,2]),y=melt((ttdd))[,3]))
p  + geom_boxplot(width=0.4)+ stat_summary(fun.y = "mean", colour = "red", size = 1, geom = "point")+
theme(axis.text.x=element_text(size=7, angle=270,hjust=1,vjust=0.3))+scale_x_discrete(position = "top")+
xlab(paste("gens in",exp.name)) + ylab("diff")
melt(ttdd)
p <- ggplot(melt(ttdd), aes(y=melt((ttdd))[,3],x=reorder(melt(ttdd)[,2],melt((ttdd))[,3])))
p  + geom_boxplot(width=0.4)+ stat_summary(fun.y = "mean", colour = "red", size = 1, geom = "point")+
theme(axis.text.x=element_text(size=7, angle=270,hjust=1,vjust=0.3))+scale_x_discrete(position = "top")+
xlab(paste("gens in",exp.name)) + ylab("diff")
meltyd<-melt(ttdd)
meltyd
ttdd
View(ttdd)
colMeans(ttdd)
colMeans(ttdd, na.rm = T)
ttdd<-data.frame((runcomp[r,,]))
summary(ttdd)
runcomp[r,,]
source('C:/Users/Dm/Desktop/generated data test/run comparison.R')
setwd("C:/Users/Dm/Desktop/generated data test")
source('C:/Users/Dm/Desktop/generated data test/run comparison.R')
summary(runcomp[,,])
debugSource('C:/Users/Dm/Desktop/generated data test/run comparison.R')
setwd("C:/Users/Dm/Desktop/generated data test")
debugSource('C:/Users/Dm/Desktop/generated data test/run comparison.R')
max(maxone,maxtwo)
?pause
?print
?query
sssExpRes
summary(sssExpRes)
source('C:/Users/Dm/Desktop/generated data test/run comparison.R')
setwd("C:/Users/Dm/Desktop/generated data test")
source('C:/Users/Dm/Desktop/generated data test/run comparison.R')
(max(maxone,maxtwo)>.9)
maxone
maxtwo
source('C:/Users/Dm/Desktop/generated data test/run comparison.R')
max(maxone,maxtwo)
source('C:/Users/Dm/Desktop/generated data test/run comparison.R')
setwd("C:/Users/Dm/Desktop/generated data test")
source('C:/Users/Dm/Desktop/generated data test/run comparison.R')
max(maxone,maxtwo)
summary(runcomp[,,])
summary(expiramentresults[selExpResL,])
selselExpRes
summary(selselExpRes)
summary(summary(selselExpRes))
summary(selselExpRes[,])
summary(selselExpRes[,,])
View(selselExpRes)
source('C:/Users/Dm/Desktop/generated data test/run comparison.R')
setwd("C:/Users/Dm/Desktop/generated data test")
source('C:/Users/Dm/Desktop/generated data test/run comparison.R')
source('C:/Users/Dm/Desktop/generated data test/run comparison.R')
setwd("C:/Users/Dm/Desktop/generated data test")
source('C:/Users/Dm/Desktop/generated data test/run comparison.R')
summary(sssExpRes)
View(sssExpRes)
maxone<-max(sssExpRes[sssExpRes[,2]==runsTcompare[count.comp,1],1])
maxtwo<-max(sssExpRes[sssExpRes[,2]==runsTcompare[count.comp,2],1])
source('C:/Users/Dm/Desktop/generated data test/run comparison.R')
setwd("C:/Users/Dm/Desktop/generated data test")
source('C:/Users/Dm/Desktop/generated data test/run comparison.R')
source('C:/Users/Dm/Desktop/generated data test/run comparison.R')
setwd("C:/Users/Dm/Desktop/generated data test")
source('C:/Users/Dm/Desktop/generated data test/run comparison.R')
setwd("C:/Users/Dm/Desktop/generated data test")
source('C:/Users/Dm/Desktop/generated data test/run comparison.R')
source('C:/Users/Dm/Desktop/generated data test/run comparison.R')
source('C:/Users/Dm/Desktop/generated data test/run comparison.R')
setwd("C:/Users/Dm/Desktop/generated data test")
source('C:/Users/Dm/Desktop/generated data test/run comparison.R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Expirament analysis.R')
z+ geom_point(colour="red",aes(I.power.df[,1] ,I.power.df[,8]),na.rm = TRUE)+
geom_point(colour="blue",aes(I.power.df[,1] ,I.power.df[,5]))+
xlab("") + ylab("%MAE, ord. by 90%, G Succ.Attempts, Bk mean, Bu P R Max 90 80 quant of max for task") +
geom_point(colour="purple",aes(I.power.df[,1] ,I.power.df[,9]))+
geom_point(colour="green",aes(I.power.df[,1] ,(I.power.df[,6]/max(I.power.df[,6])-.45)))
source('C:/Users/Dm/Desktop/generated data test/run comparison.R')
library(caret)
allmodels <- unique(modelLookup()[modelLookup()$forReg,c(1)])
allmodels
best.ranged <- c("avNNet", "nnet", "pcaNNet", "glm.nb")
best.asis <- c("svmLinear3", "relaxo", "superpc", "xgbTree")
best.cns <- c( "gam", "bam", "svmLinear2", "msaenet", "BstLm", "gbm")
best.asis %in% allmodels
best.cns %in% allmodels
best.ranged %in% allmodels
c("wkww") %in% allmodels
c("Msaenet") %in% allmodels
6cv5hp <-c("x")
6cv5hp <- c("x","z")
6cv5hp <- c("x")
cv6hp5 <- c("x","z")
source('C:/Users/Dm/Desktop/generated data test/Multiple Generators.R')
setwd("C:/Users/Dm/Desktop/generated data test")
source('C:/Users/Dm/Desktop/generated data test/Multiple Generators.R')
debugSource('C:/Users/Dm/Desktop/generated data test/Multiple Generators.R')
debugSource('C:/Users/Dm/Desktop/generated data test/Multiple Generators.R')
debugSource('C:/Users/Dm/Desktop/generated data test/Multiple Generators.R')
Rows=100
simScores<-matrix(data = 0, nrow = Rows, ncol = 12, byrow = FALSE,dimnames = NULL);
simScores[,11]<-1;###!!!!!!! this may be necessary for many algorithms
gens.names=vector(length = 100)
max.out=vector(length = 100)
max.out.sq=vector(length = 100)
max.out.sq<-NA
varimport=matrix(data=0, nrow = 100, ncol = 1000)
gen.count=0
simScores<-matrix(data = 0, nrow = Rows, ncol = 3, byrow = FALSE,dimnames = NULL);
gen.count=gen.count+1
gens.names[gen.count]="basic sum C1 + C2"
######bm C1 ^ -2#######
gen.count=gen.count+1
gens.names[gen.count]="bm C1 ^ -2"
max.out[gen.count]=1
varim=c(1,0,0,0,0,0,0,0,0,0)
varimport[gen.count,1:length(varim)]=varim
for(Row in 1:Rows){
simScores[Row,1:10]=rnorm(10, mean = 0, sd = 1)
}
for(Row in 1:Rows){
simScores[Row,1]=simScores[Row,2]^-2
}
write.table(round(simScores,digits  = 3),
file = paste(gens.names[gen.count],".csv",sep=""), append =F, quote = F, sep = ",",
eol = "\n", na = "", dec = ".", row.names = F,
col.names = F, qmethod = "double")
######bm C1 ^ -2#######
gen.count=gen.count+1
gens.names[gen.count]="bm C1 ^ -2"
max.out[gen.count]=1
varim=c(1,0,0,0,0,0,0,0,0,0)
varimport[gen.count,1:length(varim)]=varim
for(Row in 1:Rows){
simScores[Row,1:10]=rnorm(10, mean = 0, sd = 1)
}
for(Row in 1:Rows){
simScores[Row,1]=simScores[Row,2]^-2
}
write.table(round(simScores,digits  = 3),
file = paste(gens.names[gen.count],".csv",sep=""), append =F, quote = F, sep = ",",
eol = "\n", na = "", dec = ".", row.names = F,
col.names = F, qmethod = "double")
######bm C1 ^ -2#######
gen.count=gen.count+1
gens.names[gen.count]="bm C1 ^ -2"
max.out[gen.count]=1
varim=c(1,0,0,0,0,0,0,0,0,0)
varimport[gen.count,1:length(varim)]=varim
for(Row in 1:Rows){
simScores[Row,1:10]=rnorm(10, mean = 0, sd = 1)
}
for(Row in 1:Rows){
simScores[Row,1]=simScores[Row,2]^-2
}
write.table(round(simScores,digits  = 3),
file = paste(gens.names[gen.count],".csv",sep=""), append =F, quote = F, sep = ",",
eol = "\n", na = "", dec = ".", row.names = F,
col.names = F, qmethod = "double")
gen.count=gen.count+1
######bm log(C1) natural log#######
gen.count=gen.count+1
gens.names[gen.count]="bm log(C1)"
max.out[gen.count]=1#plenty undefined
varim=c(1,0)
varimport[gen.count,1:length(varim)]=varim
for(Row in 1:Rows){
simScores[Row,1:10]=rnorm(10, mean = 0, sd = 1)
}
for(Row in 1:Rows){
simScores[Row,1]=log(simScores[Row,2])
}
write.table(round(simScores,digits  = 3),
file = paste(gens.names[gen.count],".csv",sep=""), append =F, quote = F, sep = ",",
eol = "\n", na = "", dec = ".", row.names = F,
col.names = F, qmethod = "double")
######bm sin(C2)#####
gen.count=gen.count+1
gens.names[gen.count]="bm sin(C2)"
max.out[gen.count]=1#many values undefined
varim=c(1,0)
varimport[gen.count,1:length(varim)]=varim
for(Row in 1:Rows){
simScores[Row,1:10]=rnorm(10, mean = 0, sd = 3)
}
for(Row in 1:Rows){
simScores[Row,1]=sin(simScores[Row,2])
}
write.table(round(simScores,digits  = 3),
file = paste(gens.names[gen.count],".csv",sep=""), append =F, quote = F, sep = ",",
eol = "\n", na = "", dec = ".", row.names = F,
col.names = F, qmethod = "double")
######bm sin(13 * C2 ^ -.2)#####
gen.count=gen.count+1
gens.names[gen.count]="bm sin(13 * C2 ^ -.2)"
max.out[gen.count]=1#many values undefined
varim=c(1,0)
varimport[gen.count,1:length(varim)]=varim
for(Row in 1:Rows){
simScores[Row,1:10]=rnorm(10, mean = 0, sd = 3)
}
for(Row in 1:Rows){
simScores[Row,1]=sin(13*simScores[Row,2]^-.2)
}
write.table(round(simScores,digits  = 3),
file = paste(gens.names[gen.count],".csv",sep=""), append =F, quote = F, sep = ",",
eol = "\n", na = "", dec = ".", row.names = F,
col.names = F, qmethod = "double")
gen.count=gen.count+1
gens.names[gen.count]="bm sin(13 * C2 ^ -.2)"
max.out[gen.count]=1#many values undefined
varim=c(1,0)
varimport[gen.count,1:length(varim)]=varim
for(Row in 1:Rows){
simScores[Row,1:10]=rnorm(10, mean = 0, sd = 3)
}
for(Row in 1:Rows){
simScores[Row,1]=sin(13*simScores[Row,2]^-.2)
}
for(Row in 1:Rows){
simScores[Row,1:10]=rnorm(10, mean = 0, sd = 3)
}
simScores[Row,1:10]=rnorm(10, mean = 0, sd = 3)
Row
Rows
simScores
simScores[Row,1:10]=rnorm(10, mean = 0, sd = 1)
debugSource('C:/Users/Dm/Desktop/generated data test/Multiple Generators.R')
debugSource('C:/Users/Dm/Desktop/generated data test/Multiple Generators.R')
source('C:/Users/Dm/Desktop/generated data test/Multiple Generators.R')
source('C:/Users/Dm/Desktop/generated data test/Multiple Generators.R')
source('C:/Users/Dm/Desktop/generated data test/Multiple Generators.R')
gen.count=gen.count+1
gens.names[gen.count]="bm sin(13 * C2 ^ -.2)"
max.out[gen.count]=1#many values undefined
varim=c(1,0)
varimport[gen.count,1:length(varim)]=varim
for(Row in 1:Rows){
simScores[Row,1:10]=rnorm(10, mean = 0, sd = 3)
}
for(Row in 1:Rows){
simScores[Row,1]=sin(13*simScores[Row,2]^-.2)
}
write.table(round(simScores,digits  = 3),
file = paste(gens.names[gen.count],".csv",sep=""), append =F, quote = F, sep = ",",
eol = "\n", na = "", dec = ".", row.names = F,
col.names = F, qmethod = "double")
gens.names[gen.count]="bm sin(13 t C2 p n.2)"
write.table(round(simScores,digits  = 3),
file = paste(gens.names[gen.count],".csv",sep=""), append =F, quote = F, sep = ",",
eol = "\n", na = "", dec = ".", row.names = F,
col.names = F, qmethod = "double")
gens.names[gen.count]="bm sin(13 t C2 p -.2)"
write.table(round(simScores,digits  = 3),
file = paste(gens.names[gen.count],".csv",sep=""), append =F, quote = F, sep = ",",
eol = "\n", na = "", dec = ".", row.names = F,
col.names = F, qmethod = "double")
gens.names[gen.count]="bm sin(13 t C2 ^ -.2)"
write.table(round(simScores,digits  = 3),
file = paste(gens.names[gen.count],".csv",sep=""), append =F, quote = F, sep = ",",
eol = "\n", na = "", dec = ".", row.names = F,
col.names = F, qmethod = "double")
source('C:/Users/Dm/Desktop/generated data test/Multiple Generators.R')
library(mlbench)
data("BostonHousing")
summary("BostonHousing")
is.data.frame(BostonHousing)
BostonHousing
BostonHousing
BostonHow<-data.frame(BostonHousing[,14],BostonHousing[,1:13])
gen.count=gen.count+1
gens.names[gen.count]="Boston Housing"
max.out[gen.count]=1
write.table(round(BostonHow,digits  = 3),
file = paste(gens.names[gen.count],".csv",sep=""), append =F, quote = F, sep = ",",
eol = "\n", na = "", dec = ".", row.names = F,
col.names = F, qmethod = "double")
write.table(round(as.numeric(BostonHow),digits  = 3),
file = paste(gens.names[gen.count],".csv",sep=""), append =F, quote = F, sep = ",",
eol = "\n", na = "", dec = ".", row.names = F,
col.names = F, qmethod = "double")
BostonHow$chas
factor
BostonHow$chas
BostonHow$chas<-as.numeric(levels(BostonHow$chas))[BostonHow$chas]
write.table(round(as.numeric(BostonHow),digits  = 3),
file = paste(gens.names[gen.count],".csv",sep=""), append =F, quote = F, sep = ",",
eol = "\n", na = "", dec = ".", row.names = F,
col.names = F, qmethod = "double")
write.table(round((BostonHow),digits  = 3),
file = paste(gens.names[gen.count],".csv",sep=""), append =F, quote = F, sep = ",",
eol = "\n", na = "", dec = ".", row.names = F,
col.names = F, qmethod = "double")
BostonHow$chas
F1<-mlbench.friedman1(Rows, sd=1)
FF1<-data.frame(F1[["y"]],F1[[1]])
gen.count=gen.count+1
gens.names[gen.count]="Friedman's 1st"
max.out[gen.count]=1
write.table(round(FF1,digits  = 3),
file = paste(gens.names[gen.count],".csv",sep=""), append =F, quote = F, sep = ",",
eol = "\n", na = "", dec = ".", row.names = F,
col.names = F, qmethod = "double")
gen.count=gen.count+1
gens.names[gen.count]="kaggle housing"
max.out[gen.count]=.75
gen.count=gen.count+1
gens.names[gen.count]="Recc sim 1"
max.out[gen.count]=1
simPubs<-matrix(data = 0, nrow = 100, ncol = 10, byrow = FALSE,dimnames = NULL)
simGames<-matrix(data = 0, nrow = Rows, ncol = 10, byrow = FALSE,dimnames = NULL)
for(Col in 1:100)
{simPubs[Col,1:10]=rnorm(10, mean = 0, sd = 1)}
for(Row in 1:Rows)
{simGames[Row,1:10]=rnorm(10, mean = 0, sd = 1)}
for(Col in 1:100){
for(Row in 1:Rows){
simScores[Row,Col]=sum(simPubs[Col,1]*simGames[Row,1],simPubs[Col,2]*simGames[Row,2],simPubs[Col,3]*simGames[Row,3])
}}
for(Row in 1:Rows){
for(Col in 2:100){
simScores[Row,Col]=simScores[Row,Col]+rnorm(1, mean = 0, sd = .3)}
}
for(Col in 1:100){
for(Row in 1:Rows){
simScores[Row,Col]=sum(simPubs[Col,1]*simGames[Row,1],simPubs[Col,2]*simGames[Row,2],simPubs[Col,3]*simGames[Row,3])
}}
source('C:/Users/Dm/Desktop/generated data test/Multiple Generators.R')
for(Col in 1:100)
{simPubs[Col,1:10]=rnorm(10, mean = 0, sd = 1)}
for(Row in 1:Rows)
{simGames[Row,1:10]=rnorm(10, mean = 0, sd = 1)}
for(Col in 1:100){
for(Row in 1:Rows){
simScores[Row,Col]=sum(simPubs[Col,1]*simGames[Row,1],simPubs[Col,2]*simGames[Row,2],simPubs[Col,3]*simGames[Row,3])
}}
Rows
simScores[Row,Col]=sum(simPubs[Col,1]*simGames[Row,1],simPubs[Col,2]*simGames[Row,2],simPubs[Col,3]*simGames[Row,3])
Row,Col
Row
Col
simScores[Row,Col]
simScores<-matrix(data = 0, nrow = Rows, ncol = 100, byrow = FALSE,dimnames = NULL)
source('C:/Users/Dm/Desktop/generated data test/Multiple Generators.R')
max.out.sq[is.na(max.out.sq)]<-max.out[is.na(max.out.sq)]
gens.names
max.out
max.out.sq
max.out.sq[1]
max.out.sq[2]
max.out.sq=vector(length = 100)
max.out.sq
max.out.sq<-NA
max.out.sq
max.out.sq[]<-NA
max.out.sq
max.out.sq=vector(length = 100)
max.out.sq[]<-NA
max.out.sq
source('C:/Users/Dm/Desktop/generated data test/Multiple Generators.R')
varimport
max.out.sq[is.na(max.out.sq)]<-max.out[is.na(max.out.sq)]
out<-data.frame(gens.names,max.out,max.out.sq)
write.table(out,
file = "gens names.csv", append =F, quote = F, sep = ",",
eol = "\n", na = "", dec = ".", row.names = T,
col.names = F, qmethod = "double")
write.table(varimport,
file = "variable importance actual.csv", append =F, quote = F, sep = ",",
eol = "\n", na = "", dec = ".", row.names = F,
col.names = F, qmethod = "double")
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
debugSource('C:/Users/Dm/Desktop/generated data test/MLR part.R')
debugSource('C:/Users/Dm/Desktop/generated data test/MLR part.R')
MAE
?MAE
?mae
MMAAEE=MAE(p[,1],p[,2])
MMAAEE
mean.improvement=1-MAE(p[,1],p[,2])/MAE(p[,2],median(p[,2], na.rm = T))
mean(abs(p[,1]-p[,2]))
MAE(p[,2],median(p[,2], na.rm = T)
)
mean(abs(p[,2]-median(p[,2],na.rm = T)))
mean.improvement
MMAAEE/.7259167
?RMSE
RMSE
source('C:/Users/Dm/Desktop/generated data test/Model Tester Quick .R')
